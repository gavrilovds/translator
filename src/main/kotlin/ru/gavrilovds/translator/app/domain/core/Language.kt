package ru.gavrilovds.translator.app.domain.core

import arrow.core.EitherNel
import arrow.core.firstOrNone
import arrow.core.leftNel
import arrow.core.right
import ru.gavrilovds.translator.app.domain.validation.ValidationError

enum class Language(val code: String) {
    AF("af"),
    SQ("sq"),
    AM("am"),
    AR("ar"),
    HY("hy"),
    AZ("az"),
    EU("eu"),
    BE("be"),
    BN("bn"),
    BS("bs"),
    BG("bg"),
    CA("ca"),
    CEB("ceb"),
    NY("ny"),
    ZH_CN("zh-CN"),
    ZH_TW("zh-TW"),
    CO("co"),
    HR("hr"),
    CS("cs"),
    DA("da"),
    NL("nl"),
    EN("en"),
    EO("eo"),
    ET("et"),
    TL("tl"),
    FI("fi"),
    FR("fr"),
    FY("fy"),
    GL("gl"),
    KA("ka"),
    DE("de"),
    EL("el"),
    GU("gu"),
    HT("ht"),
    HA("ha"),
    HAW("haw"),
    IW("iw"),
    HI("hi"),
    HMN("hmn"),
    HU("hu"),
    IS("is"),
    IG("ig"),
    ID("id"),
    GA("ga"),
    IT("it"),
    JA("ja"),
    JW("jw"),
    KN("kn"),
    KK("kk"),
    KM("km"),
    KO("ko"),
    KU("ku"),
    KY("ky"),
    LO("lo"),
    LA("la"),
    LV("lv"),
    LT("lt"),
    LB("lb"),
    MK("mk"),
    MG("mg"),
    MS("ms"),
    ML("ml"),
    MT("mt"),
    MI("mi"),
    MR("mr"),
    MN("mn"),
    MY("my"),
    NE("ne"),
    NO("no"),
    OR("or"),
    PS("ps"),
    FA("fa"),
    PL("pl"),
    PT("pt"),
    PA("pa"),
    RO("ro"),
    RU("ru"),
    SM("sm"),
    GD("gd"),
    SR("sr"),
    ST("st"),
    SN("sn"),
    SD("sd"),
    SI("si"),
    SK("sk"),
    SL("sl"),
    SO("so"),
    ES("es"),
    SU("su"),
    SW("sw"),
    SV("sv"),
    TG("tg"),
    TA("ta"),
    TE("te"),
    TH("th"),
    TR("tr"),
    UK("uk"),
    UR("ur"),
    UZ("uz"),
    VI("vi"),
    CY("cy"),
    XH("xh"),
    YI("yi"),
    YO("yo"),
    ZU("zu");

    companion object {
        fun create(value: String?): EitherNel<ValidationError, Language> {
            return entries
                .filter { it.code == value }
                .firstOrNone()
                .fold(
                    { ValidationError("Unsupported language = $value").leftNel() },
                    { it.right() }
                )
        }
    }
}
